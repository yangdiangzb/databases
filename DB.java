/** * Created by zmr on 15/11/12. */import java.io.BufferedReader;import java.io.File;import java.io.InputStreamReader;import java.sql.*;import java.util.Calendar;import java.util.Scanner;import java.text.DateFormat;import java.text.SimpleDateFormat;public class DB {    private InputStreamReader ir = new InputStreamReader(System.in);    private BufferedReader in = new BufferedReader(ir);    public Connection conn;    public Salesperson sale = new Salesperson();    public Manufacturer manu = new Manufacturer();    public Category cat = new Category();    public Transaction trans = new Transaction();    public Part part = new Part();    public Manager manager = new Manager();    public static void main(String args[]) throws Exception {        System.out.println("Welcome to sales system!");        DB start = new DB();        start.connectToDb();        int choice = start.printMainMenu();        while(choice != 4){            switch (choice){                case 1:                    start.getInput();                    break;                case 2:                    start.sale.getInput();                    break;                case 3:                    start.manager.getInput();                    break;                case 4:                    start.conn.close();                    return;                default:                    System.out.println("Unknown number, please try again.");                    break;            }            choice = start.printMainMenu();        }        try {            start.conn.close();        } catch (Exception e) {        }        return;    }    public int printMainMenu(){        System.out.println("------Main Menu----\n");        System.out.println("What kinds of operation would you like to perform?");        System.out.println("1. Operations for administrator");        System.out.println("2. Operations for salesperson");        System.out.println("3. Operations for manager");        System.out.println("4. Exit this program");        System.out.print("Enter Your Choice: ");        try {            String s = in.readLine();            if(s.isEmpty()) return 10;            return Integer.parseInt(s);        } catch (Exception e) {            System.out.println("Unknown Error");            return 0;        }    }    public void connectToDb() {        try {            System.out.println("Fetching database class...");            Class.forName("oracle.jdbc.driver.OracleDriver");        } catch(Exception x) {            System.out.println("Unable to load the driver class!");        }        try {            System.out.println("Connecting to database...");            conn = DriverManager.getConnection(                    "jdbc:oracle:thin:@db12.cse.cuhk.edu.hk:1521:db12","d052", "xlzmsgld");            System.out.println("Connect succeed.");            sale.conn = conn;            cat.conn = conn;            manager.conn = conn;            manu.conn = conn;            part.conn = conn;            trans.conn = conn;        } catch (SQLException e){            System.out.println("Unable to connect the Database!");            System.out.println(e.getMessage());        }    }    public void createAllTables() {        sale.createTable();        manu.createTable();        part.createTable();        trans.createTable();        cat.createTable();    }    public void deleteAllTables() {        sale.deleteTable();        manu.deleteTable();        part.deleteTable();        trans.deleteTable();        cat.deleteTable();    }    public void loadFromFile() {        try {            System.out.print("Type in the source data folder path:");            String path = in.readLine();            DatabaseMetaData dbm = conn.getMetaData();            // check if "employee" table is there            ResultSet tables = dbm.getTables(null, null, "SALESPERSON", null);            if (!tables.next()) {                // Table does not exist                createAllTables();            }            String [] filename = {path+"/category.txt", path+"/manufacturer.txt", path+"/part.txt",                    path+"/salesperson.txt", path+"/transaction.txt"};            cat.loadFile(filename[0]);            manu.loadFile(filename[1]);            part.loadFile(filename[2]);            sale.loadFile(filename[3]);            trans.loadFile(filename[4]);        } catch (Exception e) {            System.out.println("While Loading, some error happen. Please check the information and you files.\n" +                    "The dir_path should contains category.txt, manufacturer.txt, part.txt, salesperson.txt, transaction.txt");        }    }    public void showNumberOfRecords() {        System.out.println("Number of records in each table:");        System.out.println("Salesperson : " + sale.count());        System.out.println("Category : " + cat.count());        System.out.println("Manufacturer : " + manu.count());        System.out.println("Part : " + part.count());        System.out.println("Transaction : " + trans.count());    }    public int showAdminMenu() {        System.out.println("------Operations for administrator menu----\n");        System.out.println("What kinds of operation would you like to perform?");        System.out.println("1. Create all tables");        System.out.println("2. Delete all tables");        System.out.println("3. Load from datafile");        System.out.println("4. Show number of records in each table");        System.out.println("5. Return to the main menu");        System.out.print("Enter Your Choince: ");        try {            String s = in.readLine();            return Integer.parseInt(s);        } catch (Exception e) {            System.out.println("Unknown Error");            return 0;        }    }    public void getInput() {        int choice = showAdminMenu();        while(choice != 5){            switch (choice){                case 1:                    createAllTables();                    break;                case 2:                    deleteAllTables();                    break;                case 3:                    loadFromFile();                    break;                case 4:                    showNumberOfRecords();                    break;                case 5:                    return;                default:                    System.out.println("Unknown number, please try again.");                    break;            }            choice = showAdminMenu();        }    }}class Salesperson{    public Connection conn;    private Integer sID;    private Integer sPhoneNumber;    private String  sName;    private String  sAddress;    private InputStreamReader ir = new InputStreamReader(System.in);    private BufferedReader in = new BufferedReader(ir);    public void setsID(Integer id){        sID = id;    }    public void setsPhoneNumber(Integer num){        sPhoneNumber = num;    }    public void setsName(String name){        sName = name;    }    public void setsAddress(String addr){        sAddress = addr;    }    public Integer getsID(){        return sID;    }    public Integer getsPhoneNumber(){        return sPhoneNumber;    }    public String getsName(){        return sName;    }    public String getsAddress(){        return sAddress;    }    public void searchParts(){        String keyword = "";        String s = "";        String o = "";        System.out.println("Choose the Search criterion");        System.out.println("1. Part Name");        System.out.println("2. Manufacturer Name");        System.out.println("Choose the Search criterion");        int choice = getInt();        switch (choice){            case 1:                s = "pName";                break;            case 2:                s = "MANUFACTURER.mName";                break;            default:                System.out.println("Unknown number, please try again.");                return;        }        System.out.println("Type in the Search Keyword: ");        try {            keyword = in.readLine();        } catch (Exception e) {            System.out.println("Unknown Error");        }        keyword = "%" + keyword + "%";        System.out.println("Choose ordering");        System.out.println("1. By price, ascending order");        System.out.println("2. By price, descending order");        System.out.println("Choose the Search criterion");        int order = getInt();        switch (order){            case 1:                o = "ASC";                break;            case 2:                o = "DESC";                break;            default:                System.out.println("Unknown number, please try again.");                return;        }        try {            PreparedStatement pstmt = conn.prepareStatement(                    "SELECT PART.pID, PART.pName, MANUFACTURER.mName, CATEGORY.cName, PART.pAvailableQuantity, MANUFACTURER.mWarrantyPeriod, PART.pPrice " +                            "FROM PART, MANUFACTURER, CATEGORY " +                            "WHERE " + s + " LIKE ? " +                            "AND PART.mID = MANUFACTURER.mID " +                            "AND PART.cID = CATEGORY.cID " +                            "ORDER BY PART.pPrice " + o);            pstmt.setString(1, keyword);            ResultSet rs = pstmt.executeQuery();            System.out.println("| ID | Name | Manufacturer | Categogy | Quantity | Warranty | Price |");            while (rs.next()) {                String pID = rs.getString("pID");                String pName = rs.getString("pName");                String mName = rs.getString("mName");                String cName = rs.getString("cName");                String pAvailableQuantity = rs.getString("pAvailableQuantity");                String mWarrantyPeriod = rs.getString("mWarrantyPeriod");                String pPrice = rs.getString("pPrice");                System.out.println("| " + pID + " | " + pName +" | " + mName + " | " + cName + " | " + pAvailableQuantity + " | " + mWarrantyPeriod + " | " + pPrice + " |" );            }        }catch (Exception e) {            System.out.println("We cannot find such records" + e.getMessage());        }    }    public int getInt(){        try {            String s = in.readLine();            return Integer.parseInt(s);        } catch (Exception e) {            System.out.println("Unknown Error");            return 0;        }    }    public void sellPart(){        int availableQuantity = 0;        System.out.println("Enter The Part ID: ");        int pid = getInt();        System.out.println("Enter The Salesperson ID: ");        int sid = getInt();        try {            PreparedStatement pstmt = conn.prepareStatement(                    "SELECT pAvailableQuantity FROM PART WHERE pID = ?");            pstmt.setInt(1, pid);            ResultSet s = pstmt.executeQuery();            s.next();            availableQuantity = s.getInt(1);        } catch (Exception e){            System.out.println("Unable to find part " + pid);            return;        }        if(availableQuantity > 0){            try {                PreparedStatement pstmt = conn.prepareStatement(                        "UPDATE PART SET pAvailableQuantity = ?  WHERE pID = ? ");                pstmt.setInt(1, availableQuantity - 1);                pstmt.setInt(2, pid);                pstmt.executeQuery();                PreparedStatement pstmt1 = conn.prepareStatement("SELECT MAX(tID) FROM TRANSACTION");                ResultSet s = pstmt1.executeQuery();                s.next();                int count = s.getInt(1);                String date = new SimpleDateFormat("dd/MM/yyyy").format(Calendar.getInstance().getTime());                PreparedStatement pstmt2 = conn.prepareStatement(                        "INSERT INTO TRANSACTION (tID, pID, sID, tDate) VALUES (?, ?, ?, TO_DATE(?, 'dd/mm/yyyy'))");                pstmt2.setInt(1, count + 1);                pstmt2.setInt(2, pid);                pstmt2.setInt(3, sid);                pstmt2.setString(4, date);                pstmt2.executeQuery();                PreparedStatement pstmt3 = conn.prepareStatement("SELECT pAvailableQuantity, pID, pName FROM PART WHERE pID = ?");                pstmt3.setInt(1, pid);                ResultSet rs = pstmt3.executeQuery();                while(rs.next()){                    String pID = rs.getString("pID");                    String pName = rs.getString("pName");                    String pAvailableQuantity = rs.getString("pAvailableQuantity");                    System.out.println("Product: " + pName + "(id: " + pID + ") Remaining Quantity: " + pAvailableQuantity);                }            }catch (Exception e) {                System.out.println("Unknown Error" + e.getMessage());            }        }        else {            System.out.println("Not Success. Remaining quantity is not enough.");        }    }    public int showSalespersonMenu() {        System.out.println("------Operations for salesperson menu----");        System.out.println("What kinds of operation would you like to perform?");        System.out.println("1. Search for parts");        System.out.println("2. Sell a part");        System.out.println("3. Return to the main menu");        System.out.print("Enter Your Choince: ");        try {            String s = in.readLine();            return Integer.parseInt(s);        } catch (Exception e) {            System.out.println("Unknown Error");            return 0;        }    }    public void getInput() {        int choice = showSalespersonMenu();        while(choice != 3){            switch (choice){                case 1:                    searchParts();                    break;                case 2:                    sellPart();                    break;                case 3:                    return;                default:                    System.out.println("Unknown number, please try again.");                    break;            }            choice = showSalespersonMenu();        }    }    public void createTable(){        try {            Statement stmt = conn.createStatement();            stmt.executeUpdate("CREATE TABLE SALESPERSON" +                    "(sID integer, sNAME VARCHAR(20)," +                    "sAddress VARCHAR(50), sPhoneNumber INTEGER," +                    "PRIMARY KEY (sID)," +                    "CHECK (sID >= 1 AND sID <= 99" +                    "AND sPhoneNumber >= 10000000 AND sPhoneNumber <= 99999999))");        } catch (Exception e){            System.out.println("Unable to create SALESPERSON table");        }    }    public int count(){        try {            Statement stmt = conn.createStatement();            ResultSet s = stmt.executeQuery("SELECT COUNT(*) FROM SALESPERSON");            s.next();            return s.getInt(1);        } catch (Exception e){            System.out.println("Unable to count Salesperson table");            return 0;        }    }    public void deleteTable(){        try {            Statement stmt = conn.createStatement();            stmt.executeUpdate("DROP TABLE SALESPERSON");        } catch (Exception e){            System.out.println("Unable to delete SALESPERSON table");        }    }    public void loadFile(String filename) {        try {            PreparedStatement pstmt = conn.prepareStatement(                    "INSERT INTO SALESPERSON (sID, sName, sAddress, sPhoneNumber) VALUES (?, ?, ?, ?)");            Scanner scanner = new Scanner(new File(filename));            while (scanner.hasNextLine()) {                String line = scanner.nextLine();                Scanner sc = new Scanner(line);                sc.useDelimiter("\\t");                if (sc.hasNext()) {                    String s1, s2, s3, s4;                    s1 = sc.next();                    s2 = sc.next();                    s3 = sc.next();                    s4 = sc.next();                    if (s1.isEmpty() || s2.isEmpty() || s3.isEmpty() || s4.isEmpty())                        continue;                    //assumes the line has a certain structure                    pstmt.setString(1, s1);                    pstmt.setString(2, s2);                    pstmt.setString(3, s3);                    pstmt.setString(4, s4);                    pstmt.executeUpdate();                }            }        } catch (Exception e){            System.out.println("Load SALESPERSON ERROR" + e.getMessage());            if (e.getMessage().contains("00001"))                System.out.println("The file contains some duplicate rows");        }    }}class Manager{    public Connection conn;    private InputStreamReader ir = new InputStreamReader(System.in);    private BufferedReader in = new BufferedReader(ir);    public int showManagerMenu() {        System.out.println("------Operations for manager menu----\n");        System.out.println("What kinds of operation would you like to perform?");        System.out.println("1. Show the sales record of a salesperson within a period");        System.out.println("2. Show the total sales value of each manufacturer");        System.out.println("3. Show the N most popular part");        System.out.println("4. Return to the main menu");        System.out.print("Enter Your Choice: ");        try {            String s = in.readLine();            return Integer.parseInt(s);        } catch (Exception e) {            System.out.println("Unknown Error");            return 0;        }    }    public void getInput(){        int choice = showManagerMenu();        while(choice != 4){            switch (choice){                case 1:                    showSaleRecord();                    break;                case 2:                    showTotalSales();                    break;                case 3:                    showPopPart();                    break;                case 4:                    return;                default:                    System.out.println("Unknown number, please try again.");                    break;            }            choice = showManagerMenu();        }    }    public void showSaleRecord(){        String s1 = "";        String s2 = "";        String s3 = "";        System.out.println("Enter The salesperson ID: ");        try {            s1 = in.readLine();        } catch (Exception e) {            System.out.println("Unknown Error" + e);        }        int salesid = Integer.parseInt(s1);        System.out.println("Type in the starting date [dd/mm/yyyy]: ");        try {            s2 = in.readLine();        } catch (Exception e) {            System.out.println("Unknown Error" + e);        }        String sdate = s2;        System.out.println("Type in the ending date [dd/mm/yyyy]: ");        try {            s3 = in.readLine();        } catch (Exception e) {            System.out.println("Unknown Error" + e);        }        String edate = s3;        try {            PreparedStatement pstmt = conn.prepareStatement(                    "SELECT TRANSACTION.tID, PART.pName, MANUFACTURER.mName, PART.pPrice, TRANSACTION.tDate " +                            "FROM TRANSACTION, PART, MANUFACTURER " +                            "WHERE sID = ? " +                            "AND TRANSACTION.pID = PART.pID " +                            "AND PART.mID = MANUFACTURER.mID " +                            "AND TRANSACTION.tDate >= TO_DATE(?, 'dd/mm/yyyy') " +                            "AND TRANSACTION.tDate <= TO_DATE(?, 'dd/mm/yyyy') " +                            "ORDER BY TRANSACTION.tDate DESC");            pstmt.setInt(1, salesid);            pstmt.setString(2, sdate);            pstmt.setString(3, edate);            ResultSet rs = pstmt.executeQuery();            System.out.println("| Transaction ID | Part Name | Manufacturer | Price | Date |");            while (rs.next()) {                String tID = rs.getString("tID");                String pName = rs.getString("pName");                String mName = rs.getString("mName");                String pPrice = rs.getString("pPrice");                Date t = rs.getDate("tDate");                DateFormat df = new SimpleDateFormat("dd/mm/yyyy");                String tDate = df.format(t);                System.out.println("| " + tID + " | " + pName +" | "+mName+" | "+pPrice+" | "+tDate+" |" );            }        }catch (Exception e) {            System.out.println("We cannot find such records" + e.getMessage());        }    }    public void showTotalSales(){        try {            PreparedStatement pstmt1 = conn.prepareStatement(                    "CREATE TABLE TEMP " +                            "AS " +                            "SELECT MANUFACTURER.mID,sum(PART.pPrice) as total "+                            "FROM TRANSACTION, PART, MANUFACTURER "+                            "WHERE MANUFACTURER.mID = PART.mID "+                            "AND PART.pID = TRANSACTION.pID "+                            "GROUP BY MANUFACTURER.mID ");            PreparedStatement pstmt2 = conn.prepareStatement(                    "SELECT MANUFACTURER.mID,MANUFACTURER.mName,TEMP.total " +                            "FROM MANUFACTURER, TEMP " +                            "WHERE MANUFACTURER.mID = TEMP.mID " +                            "ORDER BY TEMP.total DESC ");            PreparedStatement pstmt3 = conn.prepareStatement(                    "DROP TABLE TEMP ");            pstmt1.executeUpdate();            ResultSet rs = pstmt2.executeQuery();            System.out.println("| Manufacturer ID | Manufacturer Name| Total sales |");            while (rs.next()) {                String mID = rs.getString("mID");                String mName = rs.getString("mName");                String total = rs.getString("total");                System.out.println("| " + mID + " | " + mName +" | "+total+" |" );            }            pstmt3.executeUpdate();        }catch (Exception e) {            System.out.println("We cannot find such records" + e.getMessage());        }    }    public void showPopPart(){        String s1 = "";        System.out.println("Type in the number of parts: ");        try {            s1 = in.readLine();        } catch (Exception e) {            System.out.println("Unknown Error" + e);        }        int num = Integer.parseInt(s1);        try {            PreparedStatement pstmt1 = conn.prepareStatement(                    "CREATE TABLE TEMP " +                            "AS " +                            "SELECT TRANSACTION.pID,count(*) as total " +                            "FROM TRANSACTION, PART " +                            "WHERE TRANSACTION.pID = PART.pID " +                            "GROUP BY TRANSACTION.pID ");            PreparedStatement pstmt2 = conn.prepareStatement(                    "SELECT PART.pID,PART.pName,TEMP.total " +                            "FROM PART, TEMP " +                            "WHERE PART.pID = TEMP.pID " +                            "ORDER BY TEMP.total DESC ");            PreparedStatement pstmt3 = conn.prepareStatement(                    "DROP TABLE TEMP ");            pstmt1.executeUpdate();            pstmt2.setMaxRows(num);            ResultSet rs = pstmt2.executeQuery();            System.out.println("| Part ID | Part Name| No. of Transaction |");            while (rs.next()) {                String pID = rs.getString("pID");                String pName = rs.getString("pName");                String total = rs.getString("total");                System.out.println("| " + pID + " | " + pName +" | "+total+" |" );            }            pstmt3.executeUpdate();        }catch (Exception e) {            System.out.println("We cannot find such records" + e.getMessage());        }    }}class Category{    public Connection conn;    private Integer cID;    private String  cName;    public void setcID(Integer id){        cID = id;    }    public void setcName(String name){        cName = name;    }    public Integer getcID(){        return cID;    }    public String getcName() {        return cName;    }    public int count(){        try {            Statement stmt = conn.createStatement();            ResultSet s = stmt.executeQuery("SELECT COUNT(*) FROM CATEGORY");            s.next();            return s.getInt(1);        } catch (Exception e){            System.out.println("Unable to count category table");            return 0;        }    }    public void createTable(){        try {            Statement stmt = conn.createStatement();            stmt.executeUpdate("CREATE TABLE CATEGORY" +                    "(cID INTEGER, cNAME VARCHAR(20)," +                    "PRIMARY KEY (cID), " +                    "CHECK (cID >= 1 AND cID <= 9))");        } catch (Exception e){            System.out.println("Unable to create category table");        }    }    public void deleteTable(){        try {            Statement stmt = conn.createStatement();            stmt.executeUpdate("DROP TABLE CATEGORY");        } catch (Exception e){            System.out.println("Unable to delete Category table");        }    }    public void loadFile(String filename) {        try {            PreparedStatement pstmt = conn.prepareStatement(                    "INSERT INTO CATEGORY (cID, cName) VALUES (?, ?)");            Scanner scanner = new Scanner(new File(filename));            while (scanner.hasNextLine()) {                String line = scanner.nextLine();                Scanner sc = new Scanner(line);                sc.useDelimiter("\\t");                if (sc.hasNext()) {                    String s1, s2;                    s1 = sc.next();                    s2 = sc.next();                    if (s1.isEmpty() || s2.isEmpty())                        continue;                    //assumes the line has a certain structure                    pstmt.setString(1, s1);                    pstmt.setString(2, s2);                    pstmt.executeUpdate();                }            }        } catch (Exception e) {            System.out.println("Load CATEGORY ERROR" + e.getMessage());            if (e.getMessage().contains("00001"))                System.out.println("The file contains some duplicate rows");        }    }}class Manufacturer{    public Connection conn;    private Integer mID;    private Integer mPhoneNumber;    private Integer mWarrantyPeriod;    private String  mName;    private String  mAddress;    public void setmID(Integer id){        mID = id;    }    public void setmPhoneNumber(Integer num){        mPhoneNumber = num;    }    public void setmName(String name){        mName = name;    }    public void setmAddress(String addr){        mAddress = addr;    }    public void setmWarrantyPeriod(Integer period){        mWarrantyPeriod = period;    }    public Integer getmID(){        return mID;    }    public Integer getmWarrantyPeriod(){        return mWarrantyPeriod;    }    public Integer getmPhoneNumber(){        return mPhoneNumber;    }    public String getmName(){        return mName;    }    public String getmAddress(){        return mAddress;    }    public void createTable(){        try {            Statement stmt = conn.createStatement();            stmt.executeUpdate("CREATE TABLE MANUFACTURER" +                    "(mID INTEGER, mName VARCHAR(20)," +                    "mAddress VARCHAR(50), mPhoneNumber INTEGER," +                    "mWarrantyPeriod INTEGER," +                    "PRIMARY KEY (mID), " +                    "CHECK (mID <= 99 AND mID >= 1" +                    "AND MPhoneNumber >= 10000000 AND MPhoneNumber <= 99999999" +                    "AND mWarrantyPeriod <= 9 AND mWarrantyPeriod >= 1))");        } catch (Exception e){            System.out.println("Unable to create MANUFACTURER table");        }    }    public int count(){        try {            Statement stmt = conn.createStatement();            ResultSet s = stmt.executeQuery("SELECT COUNT(*) FROM MANUFACTURER");            s.next();            return s.getInt(1);        } catch (Exception e){            System.out.println("Unable to count MANUFACTURER table");            return 0;        }    }    public void deleteTable(){        try {            Statement stmt = conn.createStatement();            stmt.executeUpdate("DROP TABLE MANUFACTURER");        } catch (Exception e){            System.out.println("Unable to delete MANUFACTURER table");        }    }    public void loadFile(String filename) {        try {            PreparedStatement pstmt = conn.prepareStatement(                    "INSERT INTO MANUFACTURER (mID, mName, mAddress, mPhoneNumber, mWarrantyPeriod) VALUES (?, ?, ?, ?, ?)");            Scanner scanner = new Scanner(new File(filename));            while (scanner.hasNextLine()) {                String line = scanner.nextLine();                Scanner sc = new Scanner(line);                sc.useDelimiter("\\t");                if (sc.hasNext()) {                    String s1, s2, s3, s4, s5;                    s1 = sc.next();                    s2 = sc.next();                    s3 = sc.next();                    s4 = sc.next();                    s5 = sc.next();                    if (s1.isEmpty() || s2.isEmpty() || s3.isEmpty() || s4.isEmpty() || s5.isEmpty())                        continue;                    //assumes the line has a certain structure                    pstmt.setString(1, s1);                    pstmt.setString(2, s2);                    pstmt.setString(3, s3);                    pstmt.setString(4, s4);                    pstmt.setString(5, s5);                    pstmt.executeUpdate();                }            }        } catch (Exception e) {            System.out.println("Load MANUFACTURER ERROR" + e.getMessage());            if (e.getMessage().contains("00001"))                System.out.println("The file contains some duplicate rows");        }    }}class Part{    public Connection conn;    private Integer pID;    private Integer pPrice;    private Integer mID;    private Integer pAvailableQuantity;    private Integer cID;    private String  pName;    public void setmID(Integer id){        mID = id;    }    public void setpID(Integer id){        pID = id;    }    public void setcID(Integer id){        cID = id;    }    public void setpAvailableQuantity(Integer quant){        pAvailableQuantity = quant;    }    public void setpPrice(Integer price){        pPrice = price;    }    public void setpName(String name){        pName = name;    }    public Integer getmID(){        return mID;    }    public Integer getpID(){        return pID;    }    public Integer getcID(){        return cID;    }    public Integer getpAvailableQuantity(){        return pAvailableQuantity;    }    public Integer getpPrice(){        return pPrice;    }    public String getpName(){        return pName;    }    public void createTable(){        try {            Statement stmt = conn.createStatement();            stmt.executeUpdate("CREATE TABLE PART" +                    "(pID INTEGER, pName VARCHAR(20)," +                    "pPrice INTEGER, pAvailableQuantity INTEGER," +                    "mID INTEGER, cID integer," +                    "PRIMARY KEY (pID)," +                    "CHECK (pID >= 1 AND pID <= 999 " +                    "AND pPrice >= 1 AND pPrice <= 99999" +                    "AND mID >= 1 AND mID <= 99" +                    "AND cID >= 1 AND cID <= 9" +                    "AND pAvailableQuantity <= 99 AND pAvailableQuantity >= 1))");        } catch (Exception e){            System.out.println("Unable to create PART table");        }    }    public int count(){        try {            Statement stmt = conn.createStatement();            ResultSet s = stmt.executeQuery("SELECT COUNT(*) FROM PART");            s.next();            return s.getInt(1);        } catch (Exception e){            System.out.println("Unable to count PART table");            return 0;        }    }    public void deleteTable(){        try {            Statement stmt = conn.createStatement();            stmt.executeUpdate("DROP TABLE PART");        } catch (Exception e){            System.out.println("Unable to delete PART table");        }    }    public void loadFile(String filename) {        try {            PreparedStatement pstmt = conn.prepareStatement(                    "INSERT INTO PART (pID, pName, pPrice, mID, cID, pAvailableQuantity) VALUES (?, ?, ?, ?, ?, ?)");            Scanner scanner = new Scanner(new File(filename));            while (scanner.hasNextLine()) {                String line = scanner.nextLine();                Scanner sc = new Scanner(line);                sc.useDelimiter("\\t");                if (sc.hasNext()) {                    String s1, s2, s3, s4, s5, s6;                    s1 = sc.next();                    s2 = sc.next();                    s3 = sc.next();                    s4 = sc.next();                    s5 = sc.next();                    s6 = sc.next();                    if (s1.isEmpty() || s2.isEmpty() || s3.isEmpty() || s4.isEmpty() || s5.isEmpty() || s6.isEmpty())                        continue;                    //assumes the line has a certain structure                    pstmt.setString(1, s1);                    pstmt.setString(2, s2);                    pstmt.setString(3, s3);                    pstmt.setString(4, s4);                    pstmt.setString(5, s5);                    pstmt.setString(6, s6);                    pstmt.executeUpdate();                }            }        } catch (Exception e) {            System.out.println("Load PART ERROR" + e.getMessage());            if (e.getMessage().contains("00001"))                System.out.println("The file contains some duplicate rows");        }    }}class Transaction{    public Connection conn;    private Integer pID;    private Integer tID;    private Integer sID;    private Date  pDate;    public void setsID(Integer id){        sID = id;    }    public void setpID(Integer id){        pID = id;    }    public void settID(Integer id){        tID = id;    }    public void setpDate(Date date){        pDate = date;    }    public Integer getpID(){        return pID;    }    public Integer gettID(){        return tID;    }    public Integer getsID(){        return sID;    }    public Date getpDate(){        return pDate;    }    public void createTable(){        try {            Statement stmt = conn.createStatement();            stmt.executeUpdate("CREATE TABLE TRANSACTION" +                    "(tID INTEGER, pID INTEGER," +                    "sID INTEGER, tDate DATE," +                    "PRIMARY KEY (tID)," +                    "CHECK (tID >= 1 AND tID <= 9999" +                    "AND pID <= 999 AND pID >= 1" +                    "AND sID <= 99 AND sID >= 1))");        } catch (Exception e){            System.out.println("Unable to create TRANSACTION table");        }    }    public int count(){        try {            Statement stmt = conn.createStatement();            ResultSet s = stmt.executeQuery("SELECT COUNT(*) FROM TRANSACTION");            s.next();            return s.getInt(1);        } catch (Exception e){            System.out.println("Unable to count TRANSACTION table");            return 0;        }    }    public void deleteTable(){        try {            Statement stmt = conn.createStatement();            stmt.executeUpdate("DROP TABLE TRANSACTION");        } catch (Exception e){            System.out.println("Unable to delete TRANSACTION table");        }    }    public void loadFile(String filename) {        try {            PreparedStatement pstmt = conn.prepareStatement(                    "INSERT INTO TRANSACTION (tID, pID, sID, tDate) VALUES (?, ?, ?, TO_DATE(?, 'dd/mm/yyyy'))");            Scanner scanner = new Scanner(new File(filename));            while (scanner.hasNextLine()) {                String line = scanner.nextLine();                Scanner sc = new Scanner(line);                sc.useDelimiter("\\t");                if (sc.hasNext()) {                    String s1, s2, s3, s4, s5;                    s1 = sc.next();                    s2 = sc.next();                    s3 = sc.next();                    s4 = sc.next();                    if (s1.isEmpty() || s2.isEmpty() || s3.isEmpty() || s4.isEmpty())                        continue;                    //assumes the line has a certain structure                    pstmt.setString(1, s1);                    pstmt.setString(2, s2);                    pstmt.setString(3, s3);                    pstmt.setString(4, s4);                    pstmt.executeUpdate();                }            }        } catch (Exception e) {            System.out.println("Load TRANSACTION ERROR" + e.getMessage());            if (e.getMessage().contains("1843"))                System.out.println("The file's date format is not correct. Please check if you use dd/mm/yyyy");            if (e.getMessage().contains("00001"))                System.out.println("The file contains some duplicate rows");        }    }}